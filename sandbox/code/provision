#!/usr/bin/env python

import os
import argparse
import json
import sys
from string import Template
from subprocess import call
import tempfile

STORAGE = '/opt/docker/etc/.registry/provision.json'
PROVISION_DIR = '/opt/docker/provision/'

PLAYBOOK = Template(
"""---

- hosts: all
  vars_files:
    - ./variables.yml
  roles:
    - $roles
""")



def readJson():
    ret = {}

    if os.path.isfile(STORAGE):
        f=open(STORAGE).read()
        ret = json.loads(f)

    return ret



def saveJson(data):
    with open(STORAGE, 'w') as f:
        json.dump(data, f)



def buildRoleList(tags):
    json = readJson()
    roleList = {}

    for tag in tags:
        if tag in json:
            for role in json[tag]:
                if role not in roleList:
                    roleList[role] = {}
                roleList[role][tag] = json[tag][role]

    return roleList



def buildPlaybook(tags):
    ret = False
    roleList = buildRoleList(tags)

    if roleList:
        roleContent = []
        ret = PLAYBOOK.substitute(
            roles = "\n    - ".join(roleList.keys())
        )

    return ret


def actionRun(args):
    #ansible-playbook "${ANSIBLE_PLAYBOOK}" -i 'localhost,' --connection=local --tags="${ANSIBLE_TAG}" $ANSIBLE_OPTS

    if args.playbook:
        playbook = args.playbook
    else:
        playbookContent = buildPlaybook(args.tags)

        if playbookContent:
            f = tempfile.NamedTemporaryFile(dir=PROVISION_DIR, prefix='playbook.', suffix='.yml', delete=False)
            f.write(playbookContent)
            f.close()
            playbook = f.name
        else:
            ## nothing to do
            sys.exit(0)

    cmd = [
        'ansible-playbook',
        playbook,
        '-i', 'localhost,',
        '--connection=local',
        '--tags=' + ','.join(args.tags)
    ]

    if args.args:
        cmd.extend(args.args)

    retval = call(cmd)

    if not args.playbook:
        os.unlink(playbook)

    sys.exit(retval)



def actionPlaybook(args):
    playbook = buildPlaybook(args.tags)

    if playbook:
        print playbook
    else:
        sys.exit(1)



def actionList(args):
    json = readJson()
    list = {}

    for tag in args.tags:
        if tag in json:
            for role in json[tag]:
                print role



def actionAdd(args):
    json = readJson()

    for tag in args.tags:
        for role in args.role:
            if tag not in json:
                json[tag] = {}

            json[tag][role] = {
                'name': role,
            }

    saveJson(json);




def actionSummary(args):
    json = readJson()

    for tag in json:
        print "Roles in " + tag + ":"
        for role in json[tag]:
            print " - " + role
        print ""




def main(args):
    actions = {
        'list': actionList,
        'add': actionAdd,
        'summary': actionSummary,
        'playbook': actionPlaybook,
        'run': actionRun
    }

    func = actions.get(args.action, lambda: "nothing")
    return func(args)




if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(
        title='subcommands',
        dest='action'
    )

    ## SUMMARY command
    summary = subparsers.add_parser('summary')

    ## RUN command
    playbook = subparsers.add_parser('run')
    playbook.add_argument(
        '--tag',
        dest='tags',
        choices=['bootstrap', 'build', 'entrypoint'],
        required=True,
        action='append',
        help='Ansible tag'
    )
    playbook.add_argument(
        '--playbook',
        dest='playbook',
        help='Ansible playbook'
    )

    playbook.add_argument('args', nargs=argparse.REMAINDER)

    ## PLAYBOOK command
    playbook = subparsers.add_parser('playbook')
    playbook.add_argument(
        '--tag',
        dest='tags',
        choices=['bootstrap', 'build', 'entrypoint'],
        required=True,
        action='append',
        help='Ansible tag'
    )
    playbook.add_argument('args', nargs=argparse.REMAINDER)

    ## LIST command
    list = subparsers.add_parser('list')
    list.add_argument(
        '--tag',
        dest='tags',
        choices=['bootstrap', 'build', 'entrypoint'],
        required=True,
        action='append',
        help='Ansible tag'
    )
    list.add_argument('args', nargs=argparse.REMAINDER)

    ## ADD command
    add = subparsers.add_parser('add')
    add.add_argument(
        '--tag',
        dest='tags',
        choices=['bootstrap', 'build', 'entrypoint'],
        required=True,
        action='append',
        help='Ansible tag'
    )
    add.add_argument('role', metavar='roles', nargs='+', help='Ansible roles')

    add.add_argument('args', nargs=argparse.REMAINDER)

    ## Execute
    args = parser.parse_args()
    main(args)
